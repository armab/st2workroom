#!/usr/bin/env sh
set -e

DIR=$( dirname "$(readlink -f "$0")" )
. $DIR/shared-functions

cd $PROJECT_ROOT
echo "Configuring system..."

if [ -n "$DEBUG" ]; then
    echo "Enabling Debug..."

    PUPPET_GRAPH_ARGS="--graph --graphdir $PROJECT_ROOT/graphs/$NODE"
    PUPPET_DEBUG_ARGS="--debug --verbose $PUPPET_GRAPH_ARGS"
    LIBRARIAN_DEBUG_AGRS="--verbose"
    GIT_DEBUG_ARGS="--verbose"
    RSYNC_DEBUG_ARGS="-v"

    ## Make graph directory for output and debug
    if [ ! -d $PROJECT_ROOT/graphs/${NODE} ]; then
        mkdir -p $PROJECT_ROOT/graphs/${NODE}
    fi
fi

# Disable color output from different tools
if [ -n "$NO_COLOR" ]; then
    PUPPET_COLOR_ARGS="--color=false"
fi

## Run any pre-flight commands
$PROJECT_ROOT/script/preflight-os

## Step 1: Update from upstream
# Do not attempt to upload from upstream git
if [ -z "$DISABLE_GIT" ]; then
    git pull origin -q $GIT_DEBUG_ARGS
fi

## Step 2: Get the Puppet Environments setup

# Environment order (highest wins)
# * ENV
# * previously set ENV
# * production
CURRENT_ENV=`$PROJECT_ROOT/bin/facter puppet_environment`
PUPPET_ENV=""

if [ -z "$ENV" ]; then
    if [ -n "$CURRENT_ENV" ]; then
        PUPPET_ENV=$CURRENT_ENV
    else
        PUPPET_ENV='production'
    fi
else
    PUPPET_ENV=$ENV
fi

# Setup Puppet environments
if [ "$PUPPET_ENV" = "current_working_directory" ]; then
    # Make sure the current working directory is an environment too!
    # This is sort of a hack to support environments while developing
    # on the currently active branch in Vagrant or other environments
    echo "Setting up 'current_working_directory'..."
    rsync $RSYNC_DEBUG_ARGS -arh --delete --exclude "environments" \
          --exclude "vendor" --exclude "artifacts" --exclude "graphs" \
          --exclude "packer" --exclude "script" --exclude ".git" \
          $PROJECT_ROOT/ $PROJECT_ROOT/environments/current_working_directory/
else
    rake environments:update

    ## Set the environment. This should be done *after* librarian-puppet
    ## has done its thing to determine if it is needed to switch back
    ## to production if the branch has been deleted.
    ##
    ## `puppet_environment` is set in Class[puppet::masterless]

    ## Attempt to detect if the environment even exists... if not,
    ## roll back to the production environment.
    ### Make sure our environment conforms to Puppet environment naming
    PUPPET_ENV=$(echo $PUPPET_ENV | sed 's/[-\/]/_/g')
    if [ ! -d $PROJECT_ROOT/environments/$PUPPET_ENV ]; then
        echo "The environment $PUPPET_ENV does not exist... falling back to production"
        PUPPET_ENV='production'
    fi
fi

## Run Puppet
puppet apply $PUPPET_DEBUG_ARGS --environment $PUPPET_ENV \
    --config $PROJECT_ROOT/puppet.conf $PUPPET_COLOR_ARGS \
    $PROJECT_ROOT/environments/$PUPPET_ENV/manifests $@
