#!/usr/bin/env bash

if [ "$EUID" -ne 0 ]; then
  echo "Please run as root"
  exit
fi

PROJECT_ROOT=/opt/puppet
APT_UPDATE_FREQ=30
NODE=$(hostname -s);
BUNDLER_ARGS=""

export PATH=${PROJECT_ROOT}/bin:/usr/local/bin:$PATH

cd $PROJECT_ROOT

echo "Configuring system..."

### Setup the puppet directory
if [ "$update_from_upstream" != "0" ]; then
  git pull origin -q
fi

if [ "$debug" = "1" ]; then
  PUPPET_DEBUG_ARGS="--debug"
  R10K_DEBUG_ARGS="-v"
  RSYNC_DEBUG_ARGS="-v"
fi

if [ "$debug" != 1 ]; then
  $BUNDLER_DEBUG_ARGS="> /dev/null 2>&1"
  $LIBRARIAN_DEBUG_ARGS="> /dev/null 2>&1"
fi

if [ "$nocolor" = "1" ]; then
  PUPPET_COLOR_ARGS="--color=false"
fi

# Install necessary gems
if [ "$cache_libraries" = "1" ]; then
  if [ "$development" != "1" ]; then
    BUNDLER_ARGS="--deployment --binstubs --without development"
  fi

  # Check locally to see if the Puppetfile has been
  # updated, and then update if so.
  if [ ! -f .bundler ]; then
    echo "New!!!" > .bundler
  fi

  OLD_SHA=$(cat .bundler)
  CURRENT_SHA=$(git hash-object Gemfile)
  if [ "$OLD_SHA" != "$CURRENT_SHA" ]; then
    echo "Need to update bundled gems..."
    bundle install --path vendor/bundle $BUNDLER_ARGS
    echo $CURRENT_SHA > .bundler
  fi
else
  bundle install --path vendor/bundle $BUNDLER_ARGS $BUNDLER_DEBUG_ARGS
fi

# Deploy Environments from upstream
if [ "$generate_all_environments" != "0" ]; then
  bundle exec rake environments:update $LIBRARIAN_DEBUG_ARGS
fi

# Bootstrap Modules for current_working_directory
## `cache_libraries` only updates if Puppetfile is updated
if [ "$cache_libraries" = "1" ]; then
  # Check locally to see if the Puppetfile has been
  # updated, and then update if so.
  if [ ! -f .puppetfile ]; then
    echo "New!!!" > .puppetfile
  fi

  OLD_SHA=$(cat .puppetfile)
  CURRENT_SHA=$(git hash-object Puppetfile)
  if [ "$OLD_SHA" != "$CURRENT_SHA" ]; then
    bundle exec librarian-puppet install --path shared $LIBRARIAN_DEBUG_ARGS
    echo $CURRENT_SHA > .puppetfile
  fi
else
  bundle exec librarian-puppet install --path shared $LIBRARIAN_DEBUG_ARGS
fi

# Make sure the current working directory is an environment too!
# This is sort of a hack to support environments while developing
# on the currently active branch in Vagrant or other environments
echo "Setting up 'current_working_directory'..."
rsync $RSYNC_DEBUG_ARGS -arh --delete --exclude "environments" --exclude "vendor" \
  --exclude "artifacts" --exclude "graphs" --exclude "packer" --exclude "script" \
  --exclude ".git" $PROJECT_ROOT/ $PROJECT_ROOT/environments/current_working_directory/

# Set the environment. This should be done *after* R10K has done its thing
# to determine if it is needed to switch back to production if the branch
# has been deleted.
if [ -z "$environment" ]; then
  if [ -f $PROJECT_ROOT/current_environment ]; then
    requested_environment=$(cat $PROJECT_ROOT/current_environment)
  else
    requested_environment='production'
  fi
else
  requested_environment=$environment
fi

## Attempt to detect if the environment even exists... if not,
## roll back to the production environment.

## Make sure our environment conforms to Puppet environment naming
requested_environment=$(echo $requested_environment | sed 's/[-\/]/_/g')
if [ -d $PROJECT_ROOT/environments/${requested_environment} ]; then
  environment=$requested_environment
else
  echo "The environment ${requested_environment} does not exist... falling back to production"
  environment='production'
fi


## Make graph directory for output and debug
if [ ! -d $PROJECT_ROOT/graphs/${NODE} ]; then
  mkdir -p $PROJECT_ROOT/graphs/${NODE}
fi

## Make sure apt is up-to-date if a Debian box
if [ -e /usr/bin/apt-get ]; then
  ## Only run if we haven't run APT in awhile. Speed up feedback loop
  if [ -f /var/lib/apt/periodic/update-success-stamp ]; then
    if [ `find /var/lib/apt/periodic/update-success-stamp -mmin +${APT_UPDATE_FREQ} | grep apt` ]; then
      apt-get update
    fi
  else
    apt-get update
  fi
fi

bundle exec puppet apply $PUPPET_DEBUG_ARGS --verbose --environment $environment \
  --config $PROJECT_ROOT/puppet.conf $PUPPET_COLOR_ARGS \
  --graph --graphdir $PROJECT_ROOT/graphs/${NODE} \
  $PROJECT_ROOT/environments/${environment}/manifests $@
